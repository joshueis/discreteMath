#+TITLE: WELLNESS
#+AUTHOR: Israel Carvajal -sample code by Rick Neff
#+EMAIL:  car14040@byui.edu
* Coolness Israel Carvajal

  Use the following code block as a guide and a starting point for
  your exploration:

#+BEGIN_SRC emacs-lisp :tangle yes
    (require 'cl) ; for loop macro
    (require 'ment) ; for true and false

    (defun for-all (pred domain)
      "for-all is the Universal Quantification of a predicate (pred),
       the proposition that is true if and only if pred is true for all
       items in a universe of discourse (domain).
       This function loops across domain (which has finite size)
       to see if pred is always true.
       If it encounters a single item for which pred is false,
       then the loop short-circuits and returns false from for-all.
       Otherwise for-all returns true."
      (block 'outer-for-all
        (loop for item across domain
              do (if (null (funcall pred item))
                     (return-from 'outer-for-all false)))
        true))

    (defun for-some (pred domain)
      "for-some is the Existential Quantification of a predicate (pred),
       the proposition that is true if and only if pred is true for at
       least one item in a universe of discourse (domain).
       This function loops across domain (which has finite size)
       to see if pred is ever true.
       If it encounters a single item for which pred is true,
       then the loop short-circuits and returns true from for-all.
       Otherwise for-all returns false."
      (block 'outer-for-some
        (loop for item across domain
              do (if (funcall pred item)
                     (return-from 'outer-for-some true)))
        false))

    ; sample calls using evenp and oddp predicates, and vectors of integers for domains
    (for-all  'evenp [1 2 3]) ; => nil
    (for-some 'evenp [1 2 3]) ; => t
    (for-all  'evenp [2 4 6]) ; => t
    (for-some 'evenp [1 3 7]) ; => nil
    (for-all  'oddp [1 3 5])  ; => t
    (for-some 'oddp [2 6 10]) ; => nil
    (for-all  'oddp [5 4 3]) ; => nil
    (for-some 'oddp [6 4 3]) ; => t

    (for-all  'symbolp [a b c]); => t
    (for-all  'symbolp [a b c 1 2 3]); => nil

    (defun square (n)
      "Square a number n by multiplying it by itself."
      (* n n))

    ; sample binary predicate using numbers with a more complex relationship
    (defun is-pythagorean (x y)
      "Does x^2 + y^2 = z^2 --- a perfect square?"
      (let* ((z (sqrt (+ (square x) (square y))))
             (diff (- z (floor z))))
        (zerop diff)))

    ; sample binary predicate using everyday things
    (defun is-typically-eaten (food meal)
      "Very incomplete knowledge-base of food and meals."
      (or (and (eq meal 'breakfast) 
               (eq food 'eggs)) 
          (and (eq meal 'breakfast)
               (eq food 'bacon))
          (and (eq meal 'breakfast)
               (eq food 'toast))
          (and (eq meal 'lunch)
               (eq food 'sandwich))
          (and (eq meal 'dinner)
               (eq food 'steak))
          (and (eq meal 'dinner)
               (eq food 'potatoes))))

    ; sample call returning nil
    (is-typically-eaten 'bacon 'lunch)

    ; sample call returning t
    (is-typically-eaten 'bacon 'breakfast)

    ;Author : Israel Carvajal

    (defun inner-for-all (pred item domain)
      "This function would implement the Universal Quantification of a predicate
       (pred). The preposition that is true if and only if pred is true for all the
       items in  domain (domain). Pred needs two elements to be evaluated, 
       therefore this function would evaluate each element in domain with item 
       (argument passed). 
       If prep encounters a single item for which pred is false, then the loop 
       would stop and would return false. Otherwise inner-for-all returns true."
      (block 'inner-for-all
        (loop for item2 across domain
              do (if (null (funcall pred item item2))
                     (return-from 'inner-for-all false)))
        true))

    (defun inner-for-some (pred item domain)
      "Inner-for-some function would implement the Universal Quantification 
       'for some' of a predicate (pred). The preposition is true if and only 
       if pred is true for all the items in  domain (domain). Pred needs two 
       elements to be evaluated, therefore this function would evaluate each 
       element in domain with item (argument passed). 
       If prep encounters a single item for which pred is true, then the loop 
       would stop and would return true. Otherwise inner-for-all returns false."
      (block 'inner-for-some
        (loop for item2 across domain
              do (if(funcall pred item item2)
                     (return-from 'inner-for-some true)))
        false))


    (defun for-some-for-some (pred domain domain2)
      "for-some-for-some is the nested Universal Quantification of a predicate 
       (pred, which is a binary function), the preposition that is true if and 
       only if pred is true for at least one item in a universe of discourse(domain)
       when evaluated with another universe of discourse(domain2). 
       If prep encounters a single element for which pred is true, the loop is
       stopped and would return true. Otherwise for some for some returns false"
      (block 'outer-for-some-for-some
        (loop for item across domain
              do (if (inner-for-some pred item domain2)
                     (return-from 'outer-for-some-for-some true)))
        false))

    (defun for-all-for-all (pred domain domain2)
      "for-all-for-all is the nested Universal Quantification of a predicate 
       (pred, which is a binary function), the preposition that is true if and 
       only if pred is true for all items in a universe of discourse(domain)
       when evaluated with another universe of discourse(domain2). 
       If prep encounters a single element for which pred is false, the loop is
       stopped and would return false. Otherwise for some for some returns true"
      (block 'outer-for-all-for-all
        (loop for item across domain
              do (if (null (inner-for-all pred item domain2))
                     (return-from 'outer-for-all-for-all false)))
        true))

    (defun for-some-for-all (pred domain domain2)
      "for-some-for-all is the nested Universal Quantification of a predicate 
       (pred, which is a binary function), the preposition that is true if and 
       only if for all items in a universe of discourse(domain2) there is at 
       least one item in another universe of discourse(domain) for which pred 
       is true. 
       If it encounters a single item in domain2 for which there is not at least
       one item in domain, the loop stops and returns false. 
       Otherwise for some for all returns true"
      (block 'outer-for-some-for-all
        (loop for item across domain
              do (if (inner-for-all pred item domain2)
                     (return-from 'outer-for-some-for-all true)))
        false))

    (defun for-all-for-some (pred domain domain2)
      "for-all-for-some is the nested Universal Quantification of a predicate 
       (pred, which is a binary function), the preposition that is true if and 
       only if for at least one item in a universe of discourse(domain2) all the
       items in another universe of discourse(domain) pred is true. 
       If it encounters a single item in domain2 for which all items in domain 
       pred is true, the loop stops and returns true. 
       Otherwise for some for all returns false"
      (block 'outer-for-all-for-some
        (loop for item across domain
              do (if (null (inner-for-some pred item domain2))
              (return-from 'outer-for-all-for-some false)))
        true))

  ;predicates to be tested

  (defun is-there-a-flight (from to)
    "Is-there-a-flight would determine if a flight is available                                   
     with a given origin and destination in a simulated small airline"
    (or (and (eq from 'SFO) (eq to 'LYS)) 
        (and (eq from 'ATL) (eq to 'LYS)) 
        (and (eq from 'NYC) (eq to 'LYS))
        (and (eq from 'TXL) (eq to 'LYS)) ;to lyon
        (and (eq from 'SFO) (eq to 'YQB))
        (and (eq from 'ATL) (eq to 'YQB))
        (and (eq from 'NYC) (eq to 'YQB))
        (and (eq from 'TXL) (eq to 'YQB)); quebec                                 
        (and (eq from 'SFO) (eq to 'SCL))
        (and (eq from 'ATL) (eq to 'SCL))
        (and (eq from 'NYC) (eq to 'SCL))
        (and (eq from 'TXL) (eq to 'SCL));santiago
        (and (eq from 'SFO) (eq to 'UIO))
        (and (eq from 'NYC) (eq to 'UIO))
        (and (eq from 'ATL) (eq to 'UIO))
        (and (eq from 'TXL) (eq to 'UIO));quito
        (and (eq from 'LYS) (eq to 'NYC))
        (and (eq from 'LYS) (eq to 'TXL))
        (and (eq from 'LYS) (eq to 'ATL))
        (and (eq from 'LYS) (eq to 'SFO))
        (and (eq from 'UIO) (eq to 'NYC))
        (and (eq from 'YQB) (eq to 'LYS))
        (and (eq from 'UIO) (eq to 'ATL))
        (and (eq from 'YQB) (eq to 'TXL))
        (and (eq from 'SCL) (eq to 'ATL))
        (and (eq from 'SFO) (eq to 'ATL))
        (and (eq from 'SFO) (eq to 'NYC))
        (and (eq from 'SFO) (eq to 'TXL))
        (and (eq from 'ATL) (eq to 'SFO))
        (and (eq from 'ATL) (eq to 'NYC))
        (and (eq from 'ATL) (eq to 'TXL))
        (and (eq from 'NYC) (eq to 'TXL))
        (and (eq from 'NYC) (eq to 'SFO))
        (and (eq from 'NYC) (eq to 'ATL))
        (and (eq from 'TXL) (eq to 'ATL))
        (and (eq from 'TXL) (eq to 'SFO))
        (and (eq from 'TXL) (eq to 'NYC))
        (and (eq from 'YQB) (eq to 'NYC))))


  (defun coolness (&optional args-string)
    (let* ((args (or args-string (getenv "ARGS") "default"))
           (arg-list (split-string args " " t)))
      (if (zerop (length arg-list))
          (princ (concat
                  "To run this program: type 'coolness' followed by"
                  " keyword/s corresponding to the\ndiffent possible tests:\n"
                  "TAA, FAA, TSS, FSS, TSA, FSA, TAS, FAS\n"))
        (dolist (arg arg-list)
          (print "The following test has been run:\nis-there-a-flight from to")
          (case (intern arg)
            (TAA (print (concat
                         "FOR ALl FOR ALL with the following domains:\n"
                         "[ATL NYC TXL SFO] [YQB LYS SCL]\n"
                         "Expected result: TRUE\n"
                         "Actual result:   "
                         (if (for-all-for-all 'is-there-a-flight
                                              [ATL NYC TXL SFO] [YQB LYS SCL])
                             "TRUE" "FALSE"))))
            (FAA (print (concat
                        "FOR ALl FOR ALL with the following domains:\n"
                        "[ATL NYC UIO SCL] [ATL NYC TXL YQB])\n"
                        "Expected result: FALSE\n"
                        "Actual result:   "
                        (if (for-all-for-all 'is-there-a-flight
                                             [ATL NYC UIO SCL] [ATL NYC TXL YQB])
                            "TRUE" "FALSE"))))
            (TSS (print (concat
                         "FOR SOME FOR SOME with the following domains:\n"
                         "[ATL NYC UIO SCL] [LYS SFO YQB TXL]\n"
                         "Expected result: TRUE\n"
                         "Actual result:   "
                         (if (for-some-for-some 'is-there-a-flight
                                           [ATL NYC UIO SCL] [LYS SFO YQB TXL])
                             "TRUE" "FALSE"))))
            (FSS (print (concat
                         "For SOME FOR SOME with the following domains\n"
                         "[UIO SCL] [LYS SFO TXL YQB]\n"
                         "Expected result: FALSE\n"
                         "Actual result:   "
                         (if (for-some-for-some 'is-there-a-flight
                                                [UIO SCL] [LYS SFO TXL YQB])
                             "TRUE" "FALSE"))))
            (TSA (print (concat
                         "For SOME FOR ALL with the following domains\n"
                         "[ATL NYC TXL SFO] [LYS UIO YQB SCL]\n"
                         "Expected result: TRUE\n"
                         "Actual result:   "
                         (if (for-some-for-all 'is-there-a-flight
                                             [ATL NYC TXL SFO] [LYS UIO YQB SCL])
                             "TRUE" "FALSE"))))
            (FSA (print (concat
                         "FOR SOME FOR ALL with the following domains\n"
                         "[ATL NYC TXL SCL] [LYS UIO YQB SCL]\n"
                         "Expected result: FALSE\n"
                         "Actual result:   "
                         (if (for-all-for-some 'is-there-a-flight
                                             [ATL NYC TXL SCL] [LYS UIO YQB SCL])
                             "TRUE" "FALSE"))))
            (TAS (print (concat
                         "For ALl FOR SOME with the following domains\n"
                         "[ATL NYC TXL SFO] [LYS UIO SCL]\n"
                         "Expected result: TRUE\n"
                         "Actual result:   "
                         (if (for-all-for-some 'is-there-a-flight
                                               [ATL NYC TXL SFO] [LYS UIO SCL])
                             "TRUE" "FALSE"))))
            (FAS (print (concat
                         "For ALl FOR SOME with the following domains\n"
                         "Expected result: FALSE\n"
                         "Actual result:   "
                         (if (for-all-for-some 'is-there-a-flight
                                          [ATL NYC TXL LYS] [YQB UIO SCL])
                             "TRUE" "FALSE"))))
            (otherwise (print "I did not create that one ;-), try again"))))
        t)))
#+END_SRC

* What Is True?

  The following code block is a self-assesssment tool that allows you to
  use "fuzzy logic" (truth values from 0 to 100):

#+BEGIN_SRC emacs-lisp :tangle yes
(defun what-is-true-about-my-engagement-with-coolness ()
  "If need be, replace a 100 with a smaller number to reflect how much you feel you deserve."
  (vector
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; What is true of my experience in general?                              ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

["I had fun." 100]
["I collaborated with one or more classmates." 100]
["I learned something new." 100]
["I achieved something meaningful, or something I can build upon at a later time." 100]

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; What is true of my report on what I learned?                            ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

["I learned the basics of emacs 'org' mode in order to write it." 100]
["I explain usage of my code with plain instructions on how to run WITH command-line parameters to run the various tests." 100]

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; What is true of the mechanical "infelicities" (misspelled words,        ;;
;; grammatical errors, punctuation errors) in my report of what I learned? ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

["There are fewer than four." 100]
["There are fewer than three." 100]
["There are fewer than two." 100]
["There are none." 0]

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; What is true of how my code handles command-line arguments              ;;
;; specifying what is to be tested?                                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

["It handles TAA independently or in any combination with the others." 100]
["It handles FAA independently or in any combination with the others." 100]
["It handles TAS independently or in any combination with the others." 100]
["It handles FAS independently or in any combination with the others." 100]
["It handles TSA independently or in any combination with the others." 100]
["It handles FSA independently or in any combination with the others." 100]
["It handles TSS independently or in any combination with the others." 100]
["It handles FSS independently or in any combination with the others." 100]

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; What is true about the correctness and completeness of my code?         ;;
;; Do the four functions, for-all-for-all, for-all-for-some,               ;;
;; for-some-for-all, and for-some-for-some, work correctly?                ;;
;; As verified specifically by testing? Namely that actual output matches  ;;
;; expected output for ...                                                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

["at least one *true* case of for-all-for-all." 100]
["at least one *false* case of for-all-for-all." 100]
["at least one *true* case of for-all-for-some." 100]
["at least one *false* case of for-all-for-some." 100]
["at least one *true* case of for-some-for-all." 100]
["at least one *false* case of for-some-for-all." 100]
["at least one *true* case of for-some-for-some." 100]
["at least one *false* case of for-some-for-some." 100]

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; What is true about the clarity of my test output?                       ;;
;; Is it true that my test output is formatted such that                   ;;
;; it is crystal clear [at a glance] how for each case below               ;;
;; the expected values match their actual values?                          ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

["true for-all-for-all --- test TAA." 100]
["false for-all-for-all --- test FAA." 100]
["true for-all-for-some --- test TAS." 100]
["false for-all-for-some --- test FAS." 100]
["true for-some-for-all --- test TSA." 100]
["false for-some-for-all --- test FSA." 100]
["true for-some-for-some --- test TSS." 100]
["false for-some-for-some --- test FSS." 100]

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; What is true about the elegance of my code?                             ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

["It has some by virtue of its correctness, as first and foremost, an elegant solution is a correct solution." 100]
["It increases by means of helper functions that increase cohesion, and minimize the complexity of the logic." 100]

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; What is true about the creativity of my code?                           ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

["It is minimal, but at least it shows how the greater-than predicate works." 100]
["It increases by further using a predicate of my own devising that uses arithmetic and logic, or just numbers related by a compound relational expression." 100]
["It increases by including one or more predicates that relate to my everyday world or domain of discourse." 100]

))
#+END_SRC

** What

* Report
  
  Working on coolness provided the oportunity of learning how to use org mode. I learned that 
  it is a really nice format to create notes, organize them, and even have code in. 
  A really nice feature that I realize org mode has is the fact that a file can be exported
  to several file formats. I found that the html format is really useful given that it can be uploaded 
  to a server for web access.
  To acces this feature, the following command must be executed C-c C-e. This would allow
  the user to export the file to several file formats. 
  I programmed my script to work with my own program.
  To use it, the user needs to call the file and pass the name of the nested
  quantification, then the function will be executed. 
  The user can pass the name of one or all functions to be tested.
  ei:  $coolness -------> would display usage
       $coolness TAA ---> would run for all for all with true as expected result
       $coolness TAA FAA->would run for all for all with true as expected result and 
                                    for all for all with false as expected result
       $coolness TAA FAA TSS FSS TSA FSA TAS FAS --> would run all tests 			    
  
       

